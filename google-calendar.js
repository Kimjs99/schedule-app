import { CONFIG } from './config.js';

// Google Calendar API Ïó∞Îèô Î™®Îìà (ÏôÑÏ†Ñ Î∂ÑÎ¶¨Îêú GIS Î∞©Ïãù)
class GoogleCalendarAPI {
    constructor() {
        this.gapi = null;
        this.tokenClient = null;
        this.accessToken = null;
        this.isSignedIn = false;
        this.currentUser = null;
        this.calendarId = null;
        this.initPromise = null;
    }

    // Google API Ï¥àÍ∏∞Ìôî (ÏôÑÏ†Ñ Î∂ÑÎ¶¨Îêú Î∞©Ïãù)
    async initialize() {
        if (this.initPromise) {
            return this.initPromise;
        }

        this.initPromise = new Promise(async (resolve, reject) => {
            try {
                // Google API Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÎìú ÎåÄÍ∏∞
                await this.waitForGapi();
                await this.waitForGoogleAccounts();
                
                // Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî (Ïù∏Ï¶ù ÏóÜÏù¥, Calendar APIÎßå)
                await new Promise((loadResolve, loadReject) => {
                    gapi.load('client', {
                        callback: () => {
                            console.log('‚úÖ gapi.client Î°úÎìú ÏôÑÎ£å');
                            loadResolve();
                        },
                        onerror: (error) => {
                            console.error('‚ùå gapi.client Î°úÎìú Ïã§Ìå®:', error);
                            loadReject(error);
                        }
                    });
                });

                // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî (Ïù∏Ï¶ù Î∂ÄÎ∂Ñ ÏôÑÏ†Ñ Ï†úÍ±∞)
                await gapi.client.init({
                    apiKey: CONFIG.GOOGLE_API_KEY,
                    discoveryDocs: [CONFIG.DISCOVERY_DOC]
                    // clientId Î∞è scope ÏôÑÏ†Ñ Ï†úÍ±∞ÌïòÏó¨ auth2 Ï¥àÍ∏∞Ìôî Î∞©ÏßÄ
                });

                console.log('‚úÖ gapi.client Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (Ïù∏Ï¶ù Î∂ÑÎ¶¨)');

                // Google Identity Services OAuth ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
                try {
                    this.tokenClient = google.accounts.oauth2.initTokenClient({
                        client_id: CONFIG.GOOGLE_CLIENT_ID,
                        scope: CONFIG.SCOPES,
                        callback: (response) => {
                            console.log('‚úÖ OAuth ÏΩúÎ∞± ÏàòÏã†:', response);
                            if (response.access_token) {
                                this.accessToken = response.access_token;
                                this.isSignedIn = true;
                                
                                // gapi ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê ÌÜ†ÌÅ∞ ÏÑ§Ï†ï
                                gapi.client.setToken({ access_token: response.access_token });
                                
                                this.handleSignIn();
                            } else if (response.error) {
                                console.error('‚ùå OAuth ÏùëÎãµ Ïò§Î•ò:', response.error);
                                this.isSignedIn = false;
                                this.accessToken = null;
                                this.updateAuthUI(false);
                            }
                        },
                        error_callback: (error) => {
                            console.error('‚ùå OAuth Ïò§Î•ò:', error);
                            this.isSignedIn = false;
                            this.accessToken = null;
                            this.updateAuthUI(false);
                        }
                    });
                } catch (tokenClientError) {
                    console.error('‚ùå TokenClient Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', tokenClientError);
                    throw tokenClientError;
                }

                console.log('‚úÖ GIS OAuth ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                this.gapi = gapi;

                // Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏ (ÏÉàÎ°úÍ≥†Ïπ® ÌõÑ Î≥µÏõêÏö©)
                const savedToken = localStorage.getItem('google_access_token');
                if (savedToken) {
                    try {
                        // ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± ÌôïÏù∏
                        gapi.client.setToken({ access_token: savedToken });
                        const testResponse = await gapi.client.calendar.calendarList.list({ maxResults: 1 });
                        
                        if (testResponse) {
                            this.accessToken = savedToken;
                            this.isSignedIn = true;
                            await this.ensureCalendarExists();
                            this.updateAuthUI(true);
                        }
                    } catch (error) {
                        // ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÏúºÎ©¥ Ï†úÍ±∞
                        localStorage.removeItem('google_access_token');
                        gapi.client.setToken(null);
                    }
                }

                console.log('‚úÖ Google Calendar API Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                resolve();
            } catch (error) {
                console.error('‚ùå Google API Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                reject(error);
            }
        });

        return this.initPromise;
    }

    // gapi Î°úÎìú ÎåÄÍ∏∞
    waitForGapi() {
        return new Promise((resolve) => {
            const checkGapi = () => {
                if (window.gapi) {
                    resolve();
                } else {
                    setTimeout(checkGapi, 100);
                }
            };
            checkGapi();
        });
    }

    // Google Identity Services ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎìú ÎåÄÍ∏∞
    waitForGoogleAccounts() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 50; // 5Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
            
            const checkGoogle = () => {
                attempts++;
                
                if (window.google && window.google.accounts && window.google.accounts.oauth2) {
                    console.log('‚úÖ Google Identity Services Î°úÎìú ÏôÑÎ£å');
                    resolve();
                } else if (attempts >= maxAttempts) {
                    console.error('‚ùå Google Identity Services Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ');
                    reject(new Error('Google Identity Services Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ'));
                } else {
                    setTimeout(checkGoogle, 100);
                }
            };
            checkGoogle();
        });
    }

    // Î°úÍ∑∏Ïù∏ (GIS Î∞©Ïãù)
    async signIn() {
        try {
            if (!this.tokenClient) {
                throw new Error('OAuth ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
            }
            
            console.log('üîê Google Î°úÍ∑∏Ïù∏ ÏãúÏûë...');
            
            // Google Identity ServicesÎ°ú Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠
            // ÏΩúÎ∞±ÏùÄ Ïù¥ÎØ∏ tokenClient Ï¥àÍ∏∞ÌôîÏóêÏÑú ÏÑ§Ï†ïÎê®
            this.tokenClient.requestAccessToken({ 
                prompt: 'consent',
                include_granted_scopes: true
            });
            
            return true;
        } catch (error) {
            console.error('‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
            throw error;
        }
    }

    // Î°úÍ∑∏ÏïÑÏõÉ
    async signOut() {
        try {
            if (this.accessToken) {
                // Google Identity ServicesÎ°ú ÌÜ†ÌÅ∞ Ìï¥Ï†ú
                google.accounts.oauth2.revoke(this.accessToken, () => {
                    console.log('‚úÖ ÌÜ†ÌÅ∞ Ìï¥Ï†ú ÏôÑÎ£å');
                });
            }
            
            // Î°úÏª¨ ÏÉÅÌÉú Ï†ïÎ¶¨
            gapi.client.setToken(null);
            localStorage.removeItem('google_access_token');
            
            this.isSignedIn = false;
            this.accessToken = null;
            this.currentUser = null;
            this.calendarId = null;
            
            this.updateAuthUI(false);
            
            // Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Î∞úÏÉù
            window.dispatchEvent(new CustomEvent('authStateChanged', {
                detail: { isSignedIn: false, user: null }
            }));
            
            return true;
        } catch (error) {
            console.error('‚ùå Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
            throw error;
        }
    }

    // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ï≤òÎ¶¨
    async handleSignIn() {
        try {
            console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ï≤òÎ¶¨ ÏãúÏûë');
            
            // ÌÜ†ÌÅ∞ Ï†ÄÏû• (ÏÉàÎ°úÍ≥†Ïπ® Ïãú Î≥µÏõêÏö©)
            if (this.accessToken) {
                localStorage.setItem('google_access_token', this.accessToken);
            }
            
            // Í∞ÄÏßú ÏÇ¨Ïö©Ïûê Í∞ùÏ≤¥ (Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Îäî ÌïÑÏöîÌïòÏßÄ ÏïäÏùå)
            this.currentUser = { 
                getBasicProfile: () => ({ 
                    getEmail: () => 'user@gmail.com' 
                }) 
            };
            
            // Ï∫òÎ¶∞Îçî ÏÑ§Ï†ï Î∞è UI ÏóÖÎç∞Ïù¥Ìä∏
            await this.ensureCalendarExists();
            this.updateAuthUI(true);
            
            // Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Î∞úÏÉù
            window.dispatchEvent(new CustomEvent('authStateChanged', {
                detail: { isSignedIn: true, user: this.currentUser }
            }));
            
            console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÌõÑ Ï≤òÎ¶¨ ÏôÑÎ£å');
        } catch (error) {
            console.error('‚ùå Î°úÍ∑∏Ïù∏ ÌõÑ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
        }
    }

    // Ï†ÑÏö© Ï∫òÎ¶∞Îçî ÌôïÏù∏ Î∞è ÏÉùÏÑ±
    async ensureCalendarExists() {
        try {
            console.log('üìÖ Ï∫òÎ¶∞Îçî ÌôïÏù∏ Ï§ë...');
            
            // Í∏∞Ï°¥ Ï∫òÎ¶∞Îçî Î™©Î°ùÏóêÏÑú Ï∞æÍ∏∞
            const response = await gapi.client.calendar.calendarList.list();
            const calendars = response.result.items || [];
            
            let targetCalendar = calendars.find(cal => 
                cal.summary === CONFIG.CALENDAR_NAME
            );

            if (targetCalendar) {
                this.calendarId = targetCalendar.id;
                console.log('‚úÖ Í∏∞Ï°¥ Ï∫òÎ¶∞Îçî ÏÇ¨Ïö©:', this.calendarId);
            } else {
                console.log('üìÖ ÏÉà Ï∫òÎ¶∞Îçî ÏÉùÏÑ± Ï§ë...');
                
                // ÏÉà Ï∫òÎ¶∞Îçî ÏÉùÏÑ±
                const createResponse = await gapi.client.calendar.calendars.insert({
                    resource: {
                        summary: CONFIG.CALENDAR_NAME,
                        description: CONFIG.CALENDAR_DESCRIPTION,
                        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
                    }
                });

                this.calendarId = createResponse.result.id;
                console.log('‚úÖ ÏÉà Ï∫òÎ¶∞Îçî ÏÉùÏÑ± ÏôÑÎ£å:', this.calendarId);
            }
        } catch (error) {
            console.error('‚ùå Ï∫òÎ¶∞Îçî ÏÑ§Ï†ï Ïã§Ìå®:', error);
            throw error;
        }
    }

    // Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
    async createEvent(eventData) {
        if (!this.isSignedIn || !this.calendarId) {
            throw new Error('Google CalendarÏóê Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        }

        try {
            const event = this.formatEventForGoogle(eventData);
            
            const response = await gapi.client.calendar.events.insert({
                calendarId: this.calendarId,
                resource: event
            });

            console.log('‚úÖ Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å:', response.result.id);
            return {
                id: response.result.id,
                ...eventData
            };
        } catch (error) {
            console.error('‚ùå Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
            throw error;
        }
    }

    // Ïù¥Î≤§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
    async updateEvent(eventId, eventData) {
        if (!this.isSignedIn || !this.calendarId) {
            throw new Error('Google CalendarÏóê Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        }

        try {
            const event = this.formatEventForGoogle(eventData);
            
            const response = await gapi.client.calendar.events.update({
                calendarId: this.calendarId,
                eventId: eventId,
                resource: event
            });

            console.log('‚úÖ Ïù¥Î≤§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', eventId);
            return {
                id: eventId,
                ...eventData
            };
        } catch (error) {
            console.error('‚ùå Ïù¥Î≤§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
            throw error;
        }
    }

    // Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
    async deleteEvent(eventId) {
        if (!this.isSignedIn || !this.calendarId) {
            throw new Error('Google CalendarÏóê Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        }

        try {
            await gapi.client.calendar.events.delete({
                calendarId: this.calendarId,
                eventId: eventId
            });

            console.log('‚úÖ Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú ÏôÑÎ£å:', eventId);
            return true;
        } catch (error) {
            console.error('‚ùå Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
            throw error;
        }
    }

    // Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
    async getEvents() {
        if (!this.isSignedIn || !this.calendarId) {
            return [];
        }

        try {
            const response = await gapi.client.calendar.events.list({
                calendarId: this.calendarId,
                timeMin: new Date().toISOString(),
                showDeleted: false,
                singleEvents: true,
                maxResults: 1000,
                orderBy: 'startTime'
            });

            const events = response.result.items || [];
            return events.map(event => this.formatEventFromGoogle(event));
        } catch (error) {
            console.error('‚ùå Ïù¥Î≤§Ìä∏ Ï°∞Ìöå Ïã§Ìå®:', error);
            return [];
        }
    }

    // Ïï± ÌòïÏãù -> Google Calendar ÌòïÏãù Î≥ÄÌôò
    formatEventForGoogle(eventData) {
        const startDateTime = new Date(`${eventData.date}T${eventData.time}`);
        const endDateTime = new Date(startDateTime);
        endDateTime.setHours(endDateTime.getHours() + 1); // Í∏∞Î≥∏ 1ÏãúÍ∞Ñ Ïù¥Î≤§Ìä∏

        return {
            summary: eventData.title,
            description: eventData.description || '',
            start: {
                dateTime: startDateTime.toISOString(),
                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
            },
            end: {
                dateTime: endDateTime.toISOString(),
                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
            },
            extendedProperties: {
                private: {
                    priority: eventData.priority || 'medium',
                    scheduleAppId: eventData.id || Date.now().toString()
                }
            },
            colorId: this.getPriorityColorId(eventData.priority)
        };
    }

    // Google Calendar -> Ïï± ÌòïÏãù Î≥ÄÌôò
    formatEventFromGoogle(googleEvent) {
        const startDate = new Date(googleEvent.start.dateTime || googleEvent.start.date);
        const priority = googleEvent.extendedProperties?.private?.priority || 'medium';
        const scheduleAppId = googleEvent.extendedProperties?.private?.scheduleAppId || googleEvent.id;

        return {
            id: scheduleAppId,
            googleEventId: googleEvent.id,
            title: googleEvent.summary || 'Ï†úÎ™© ÏóÜÏùå',
            date: startDate.toISOString().split('T')[0],
            time: startDate.toTimeString().slice(0, 5),
            description: googleEvent.description || '',
            priority: priority,
            createdAt: googleEvent.created
        };
    }

    // Ïö∞ÏÑ†ÏàúÏúÑÎ≥Ñ ÏÉâÏÉÅ ID Î∞òÌôò
    getPriorityColorId(priority) {
        const colorMap = {
            high: '11', // Îπ®Í∞ÑÏÉâ
            medium: '5', // ÎÖ∏ÎûÄÏÉâ  
            low: '2'     // Ï¥àÎ°ùÏÉâ
        };
        return colorMap[priority] || '1';
    }

    // Ïù∏Ï¶ù UI ÏóÖÎç∞Ïù¥Ìä∏
    updateAuthUI(isSignedIn) {
        const authButton = document.getElementById('authButton');
        const authStatus = document.getElementById('connectionStatus');
        
        if (authButton) {
            if (isSignedIn) {
                authButton.textContent = 'Î°úÍ∑∏ÏïÑÏõÉ';
                authButton.className = 'auth-button signed-in';
                authButton.disabled = false;
            } else {
                authButton.textContent = 'Google Calendar Ïó∞Îèô';
                authButton.className = 'auth-button signed-out';
                authButton.disabled = false;
            }
        }

        if (authStatus) {
            if (isSignedIn) {
                authStatus.textContent = 'Google Calendar Ïó∞Í≤∞Îê®';
                authStatus.className = 'connected';
            } else {
                authStatus.textContent = 'Ïò§ÌîÑÎùºÏù∏ Î™®Îìú';
                authStatus.className = 'offline';
            }
        }
    }

    // Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
    isConnected() {
        return this.isSignedIn && this.calendarId;
    }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const googleCalendar = new GoogleCalendarAPI();

// Ï†ÑÏó≠ Ï†ëÍ∑ºÏùÑ ÏúÑÌï¥ window Í∞ùÏ≤¥Ïóê Ìï†Îãπ
window.googleCalendar = googleCalendar;

export { googleCalendar };